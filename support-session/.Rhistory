data2
A=runif(10000)
H=hist(A,breaks=c(0,0.2,0.4,0.6,0.8,1))
H=hist(A,breaks=c(0,0.2,0.4,0.6,0.8,1),freq=FALSE)
H1=hist(A,breaks=c(0,0.2,0.6,0.8,1))
H1$counts
H$counts
1+3.22*log10(10000)
round(1+3.22*log10(10000))
round(1+3.22*log10(1000000))
round(1+3.22*log10(100))
round(1+3.22*log10(1))
round(1+3.22*log10(2))
round(1+3.22*log10(3))
round(1+3.22*log10(4))
round(1+3.22*log10(5))
round(1+3.22*log10(15))
round(1+3.22*log10(10))
fluc <- function(n,lambda,K)
{
L=c()
for (i in 1:K){
A=rexp(n,lambda)
L=c(L,1/mean(A))
}
fluc=L
}
Est=fluc(100,4,50)
Est
boxplot(Est)
Est=fluc(1000,4,50)
boxplot(Est)
Est=fluc(10000,4,50)
boxplot(Est)
Est=fluc(1000000,4,50)
boxplot(Est)
getwd()
X=runif(100,-3,3)
Y=3-2*rnorm(100)
X=runif(100,-3,3)
Y=3-2*rnorm(100)
plot(X,Y)
L=lm(X)
L=lm(Y~X)
L
L
names(L)
L$coefficients
L$residuals
#predictions Yi hat
L$fitted.values
X=runif(100,-3,3)
Y=.3-2*rnorm(100)
plot(X,Y)
L=lm(Y~X)
names(L)
L$coefficients
L$residuals
#predictions Yi hat
L$fitted.values
#Rank of the Matrix
L$rank
sum(L$residuals^2)/98
summary(L)
sqrt(sigmahatn2)
sigmahatn2=sum(L$residuals^2)/98
sqrt(sigmahatn2)
# Value of residual for each point
R=L$residuals
hist(R,freq=FALSE)
plot(L)
plot(L)
plot(X,Y)
L=lm(Y~X)
summary(L)
X= runif(50,-7,7)
Y=5-6*X+rnorm(50)
plot(X,Y)
L=lm(Y~X)
L
L$coefficients
#
abline(L,col='red')
# show expectation of Y at point x0
help(predict.lm)
new = seq(-3,3,0.1)
new = data.frame(x=new)
predict(L,new)
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$x, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,10)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,10)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,50)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
pred.w.plim <- predict(L,  interval = "prediction")
pred.w.clim <- predict(L,  interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
L
summary(L)
X = cbind(rep(1,50),A)
X
#rank of X
install.packages('Matrix')
rankMatrix(X)
A[,3]=rpois(50,0.8)
rankMatrix(X)
#rank of X
install.packages('Matrix')
rankMatrix(X)
install.packages("Matrix")
rankMatrix(X)
Matrix.rankMatrix(X)
rankMatrix(X)
# Check details
summary(L)
rankMatrix(X)
# Generate multiple variables
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
# build the X matrix (Y = XB + U)
X = cbind(rep(1,50),A)
X
B=cbind(A[,1],A[,2],A[,4])
LB=lm(Y~.,data=as.data.frame(B))
LB
summary(LB)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rexp(500,0.5)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
hist(L$residuals,freq = FALSE)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
setwd("C:/MY_DATAS/MyGit/Statistical-Analysis/support-session")
a = - qnorm(alpha/2)
# confidence interval for lambda
alpha = 0.05
a = - qnorm(alpha/2)
install.packages(Rmisc)
install.packages('Rmisc')
library(Rmisc)
ci = CI(data,0.95)
ci = CI(data,ci=0.95)
lambda = 4.5
data = rexp(1000,lambda)
install.packages('Rmisc')
library(Rmisc)
ci = CI(data,ci=0.95)
library(Rmisc)
ci = CI(data,ci=0.95)
ci
lambdaci = 1/ci
lambdaci
