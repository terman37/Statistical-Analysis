# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,10)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,50)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
pred.w.plim <- predict(L,  interval = "prediction")
pred.w.clim <- predict(L,  interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
L
summary(L)
X = cbind(rep(1,50),A)
X
#rank of X
install.packages('Matrix')
rankMatrix(X)
A[,3]=rpois(50,0.8)
rankMatrix(X)
#rank of X
install.packages('Matrix')
rankMatrix(X)
install.packages("Matrix")
rankMatrix(X)
Matrix.rankMatrix(X)
rankMatrix(X)
# Check details
summary(L)
rankMatrix(X)
# Generate multiple variables
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
# build the X matrix (Y = XB + U)
X = cbind(rep(1,50),A)
X
B=cbind(A[,1],A[,2],A[,4])
LB=lm(Y~.,data=as.data.frame(B))
LB
summary(LB)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rexp(500,0.5)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
hist(L$residuals,freq = FALSE)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
A=matrix(0,ncol=3,nrow=50)
A[,1]=rexp(50,0.2)
A[,2]=rexp(50,7)
A[,3]=runif(50,-5,6)
Y=5-3*A[,1]+2*A[,2]-A[,3]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
summary(L)
Ab = runif(50,2,8)
A = cbind(A,Ab)
dim(A)
L=lm(Y~.,data=as.data.frame(A))
summary(L)
A=matrix(0,ncol=3,nrow=50)
A[,1]=rexp(50,0.2)
A[,2]=rexp(50,7)
A[,3]=runif(50,-5,6)
Y=5-3*A[,1]+2*A[,2]-A[,3]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
summary(L)
Ab = runif(50,2,8)
A = cbind(A,Ab)
dim(A)
L=lm(Y~.,data=as.data.frame(A))
summary(L)
setwd("C:/MY_DATAS/MyGit/Statistical-Analysis/linear-regression")
Y = read.csv('Y1.txt')
View(Y)
Y = read.csv('Y1.txt')
A = read.csv('A1.txt')
L=lm(Y~A)
summary(L)
L=lm(Y~A)
Y = as.data.frame(read.csv('Y1.txt'))
A = as.data.frame(read.csv('A1.txt'))
L=lm(Y~A)
Y = as.matrix(read.csv('Y1.txt'))
A = as.matrix(read.csv('A1.txt'))
L=lm(Y~A)
summary(L)
View(A)
A = as.matrix(read.csv('A1.txt',sep=" "))
L=lm(Y~A)
summary(L)
A
A = as.matrix(read.csv('A1.txt',sep=" ",header = FALSE))
A
L=lm(Y~A)
Y = as.matrix(read.csv('Y1.txt',header = FALSE))
A = as.matrix(read.csv('A1.txt',sep=" ",header = FALSE))
L=lm(Y~A)
summary(L)
plot(L)
Y = as.matrix(read.csv('Y2.txt',header = FALSE))
A = as.matrix(read.csv('A1.txt',sep=" ",header = FALSE))
L=lm(Y~A)
summary(L)
plot(L)
Y = as.matrix(read.csv('Y3.txt',header = FALSE))
A = as.matrix(read.csv('A3.txt',sep=" ",header = FALSE))
L=lm(Y~A)
summary(L)
plot(L)
Y = as.matrix(read.csv('Y4.txt',header = FALSE))
A = as.matrix(read.csv('A4.txt',sep=" ",header = FALSE))
L=lm(Y~A)
summary(L)
plot(L)
Y = as.matrix(read.csv('Y1.txt',header = FALSE))
A = as.matrix(read.csv('A1.txt',sep=" ",header = FALSE))
hist(Y)
S=rep(1:4,times=3)
T = factor(S)
A = read.table('A1.txt')
head(A)
L=lm(Y~A)
A = as.matrix(read.table('A1.txt'))
head(A)
L=lm(Y~A)
summary(L)
L=lm(Y~.,data=A)
A = read.table('A1.txt')
L=lm(Y~.,data=A)
summary(L)
Y = as.matrix(read.csv('Y2.txt',header = FALSE))
A = read.table('A1.txt')
L=lm(Y~.,data=A)
summary(L)
# R-squared is ok
# check if noise is gaussian setting
#   residuals median ~= 0 and almost symmetric
plot(L)
# Fstatistic p-value small validate linear model
# cannot remove V2/V3/V4 at once because there may be correlation with others
# we should perform variable selection procedure
cor(A)
Y = as.matrix(read.csv('Y3.txt',header = FALSE))
A = read.table('A3.txt')
L=lm(Y~.,data=A)
summary(L)
plot(L)
Y = as.matrix(read.csv('Y3.txt',header = FALSE))
A = read.table('A3.txt')
L=lm(Y~.,data=A)
summary(L)
dim(Y)
dim(A)
Y = as.matrix(read.csv('Y3.txt',header = FALSE))
A = read.table('A3.txt')
L=lm(Y~.,data=A)
summary(L)
dim(A)
plot(L)
cor(A)
Y = as.matrix(read.csv('Y4.txt',header = FALSE))
A = read.table('A4.txt')
L=lm(Y~.,data=A)
summary(L)
plot(L)
cor(A)
# residuals seems not symmetric
plot(L)
hist(L$residuals)
hist(L$residuals,freq=FALSE)
hist(L$residuals,freq=FALSE,nclass=50)
hist(L$residuals,freq=FALSE,nclass=20)
# show noise is not gausssian
# Rsquared big so linear model ok, noise not gaussian, pvalue cannot be used
# use only least squared (no tests)
L
Lb=lm(Y~.,A[,c(1,5)])
summary(Lb)
summary(L)
View(Y)
# ***************************************************************************
# Y2 A1
Y = as.matrix(read.csv('Y2.txt',header = FALSE))
A = read.table('A1.txt')
L=lm(Y~.,data=A[,1])
L=lm(Y~data=A[,1])
L=lm(Y~A[,1])
L$adj.r.squared
summary(L)$adj.r.squared
L=lm(Y~A[,1])
summary(L)$adj.r.squared
L=lm(Y~A[,2])
summary(L)$adj.r.squared
L=lm(Y~A[,3])
summary(L)$adj.r.squared
L=lm(Y~A[,4])
summary(L)$adj.r.squared
L=lm(Y~A[,5])
summary(L)$adj.r.squared
L=lm(Y~A[,c(5,1)])
summary(L)$adj.r.squared
S=summary(L)
View(S)
View(S)
summary(L)$adj.r.squared
S
??(fisher)
help(qt)
qf(69.5)
qf(69.5,50)
qf(69.5,48,2)
help(qf)
