# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-3,3,0.1))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,5)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,10)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,50)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1)
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# show expectation of Y at point x0
pred.w.plim <- predict(L,  interval = "prediction")
pred.w.clim <- predict(L,  interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
L
summary(L)
X = cbind(rep(1,50),A)
X
#rank of X
install.packages('Matrix')
rankMatrix(X)
A[,3]=rpois(50,0.8)
rankMatrix(X)
#rank of X
install.packages('Matrix')
rankMatrix(X)
install.packages("Matrix")
rankMatrix(X)
Matrix.rankMatrix(X)
rankMatrix(X)
# Check details
summary(L)
rankMatrix(X)
# Generate multiple variables
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
# build the X matrix (Y = XB + U)
X = cbind(rep(1,50),A)
X
B=cbind(A[,1],A[,2],A[,4])
LB=lm(Y~.,data=as.data.frame(B))
LB
summary(LB)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rexp(500,0.5)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
hist(L$residuals,freq = FALSE)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
setwd("C:/MY_DATAS/MyGit/Statistical-Analysis/multiple-linear-regression")
A= read.table(ozone.txt)
A= read.table('ozone.txt')
head(A)
shape(A)
dim(A)
A= read.table('ozone.txt')
head(A)
A= read.table('ozone.txt',header = TRUE)
head(A)
dim(A)
# check if wind (vent) has influence on concentration in ozone (maxO3)
attach(ozone)
vent
# Analysis of Ozone.txt data
ozone = read.table('ozone.txt',header = TRUE)
head(A)
dim(A)
# check if wind (vent) has influence on concentration in ozone (maxO3)
attach(ozone)
vent
pluie
clear()
summary(ozone[c('maxO3','vent')])
# visual view (boxplot of variable maxO3 with repect of wind)
boxplot(maxO3~vent,data=ozone,pch=15,cex=0.5,cool='green')
# visual view (boxplot of variable maxO3 with repect of wind)
boxplot(maxO3~vent,data=ozone,pch=15,cex=0.5,col='green')
# visual view (boxplot of variable maxO3 with repect of wind)
# pch (points shape) / cex (text size) options
# check avalailable options in help(par)
boxplot(maxO3~vent,data=ozone,pch=11,cex=0.5,col='green')
15
# visual view (boxplot of variable maxO3 with repect of wind)
# pch (points shape) / cex (text size) options
# check avalailable options in help(par)
boxplot(maxO3~vent,data=ozone,pch=15,cex=0.5,col='green')
# visual view (boxplot of variable maxO3 with repect of wind)
# pch (points shape) / cex (text size) options
# check avalailable options in help(par)
boxplot(maxO3~vent,data=ozone,pch=15,cex=0.5,col='green')
# Analysis of variance with one factor
model = aov(maxO3~vent)
model
# Equality of the variances:
var1 = var(maxO3[vent=='Est',])
# Equality of the variances:
var1 = var(maxO3[(vent=='Est'),])
# Equality of the variances:
var1 = var(maxO3[(vent=='Est')])
var2 = var(maxO3[vent=='Nord'])
var1 = var(maxO3[vent=='Est'])
var2 = var(maxO3[vent=='Nord'])
var3 = var(maxO3[vent=='Ouest'])
var4 = var(maxO3[vent=='Sud'])
# 2nd way: levene test
summary(aov(abs(model$res)~vent))
View(model)
# 3rd way: bartlett test
bartlett.test(model$res~vent)
select.est = ozone[,'vent']=='est'
shapiro.test(ozone[select.est,'maxO3'])
select.est = ozone[,'vent']=='Est'
select.nord = ozone[,'vent']=='Nord'
select.ouest = ozone[,'vent']=='Ouest'
select.sud = ozone[,'vent']=='Sud'
# Shapiro test
shapiro.test(ozone[select.est,'maxO3'])
# p-value big, --> H0 --> Gaussianity OK
shapiro.test(ozone[select.nord,'maxO3'])
shapiro.test(ozone[select.ouest,'maxO3'])
shapiro.test(ozone[select.sud,'maxO3'])
shapiro.test(ozone[,'maxO3'])
# p-value big, --> H0 --> Gaussianity OK
shapiro.test(ozone[select.nord,'maxO3'])
qqnorm((ozone[select.est,'maxO3']))
summary(ozone.aov)
# Finally
ozone.aov = aov(maxO3~vent)
summary(ozone.aov)
# ****************************************************
# studentized version of residuals
res.ozone = rstudent(ozone.aov)
plot(res.ozone~vent)
summary(lm(maxO3~vent,data=ozone))
summary(lm(maxO3~c(vent,base=2),data=ozone))
summary(lm(maxO3~C(vent,base=2),data=ozone))
summary(lm(maxO3~C(vent,sum),data=ozone))
# ****************************************************
#
# Analysis of Ozone.txt data
#
# check if wind (vent) has influence on concentration in ozone (maxO3)
#
# ****************************************************
ozone = read.table('ozone.txt',header = TRUE)
head(A)
dim(A)
attach(ozone)
# Global overview
summary(ozone[c('maxO3','vent')])
# Visual view (boxplot of variable maxO3 with repect of wind)
# pch (points shape) / cex (text size) options
# Check avalailable options in help(par)
boxplot(maxO3~vent,data=ozone,pch=15,cex=0.5,col='green')
# ****************************************************
# Analysis of variance with one factor
model = aov(maxO3~vent)
model
# ****************************************************
# Before analysing the outputs of test,
# We need to check assumptions on the noise
# - Homoscedasticity (same variance): bartlett test, or levene test
# - Gaussianity: Normal QQPlot, or ks.test, or shapiro test
# - Independency: looking the experimenttion
# ****************************************************
# - Equality of the variances:
# 1st way: calculate all variances
var1 = var(maxO3[vent=='Est'])
var2 = var(maxO3[vent=='Nord'])
var3 = var(maxO3[vent=='Ouest'])
var4 = var(maxO3[vent=='Sud'])
# then compare pair by pair at level alpha / 6 (nb test = X! )
# ...
# 2nd way: levene test
summary(aov(abs(model$res)~vent))
# p-value big --> do not reject H0 --> variances can be considered equal
# 3rd way: bartlett test
bartlett.test(model$res~vent)
# p-value big --> do not reject H0 --> variances can be considered equal
# Conclusion: we can accept the equality of the variances
# ****************************************************
# - Gaussianity:
select.est = ozone[,'vent']=='Est'
select.nord = ozone[,'vent']=='Nord'
select.ouest = ozone[,'vent']=='Ouest'
select.sud = ozone[,'vent']=='Sud'
# Shapiro test
# here we are on 1 label
# --> we can work directly on the response variable and not on the residuals
# --> if whole dataset -> consider residuals because response for all individuals are not iid
# Normality of the sample associated to label est
shapiro.test(ozone[select.est,'maxO3'])
# p-value big, --> H0 --> Gaussianity OK
shapiro.test(ozone[select.nord,'maxO3'])
shapiro.test(ozone[select.ouest,'maxO3'])
shapiro.test(ozone[select.sud,'maxO3'])
# QQnorm
qqnorm((ozone[select.est,'maxO3']))
# points seems to be aligned --> Gaussian
# Conclusion: the assumptions on the noise seems to be satisfied
# ****************************************************
# Finally
ozone.aov = aov(maxO3~vent)
summary(ozone.aov)
# p-value smaller than 5% --> there is an influence of the wind on the ozone concentration
# ****************************************************
# studentized version of residuals
res.ozone = rstudent(ozone.aov)
plot(res.ozone~vent)
summary(lm(maxO3~vent,data=ozone))
# constraint with reference cell on label 2
summary(lm(maxO3~C(vent,base=2),data=ozone))
# constraint on the sum of the mu_i = 0
summary(lm(maxO3~C(vent,sum),data=ozone))
X=data.frame(T1=c(5,8,7,7,10,8),T2=(4,6,6,3,5,6),T3=c(6,4,4,5,4,3),T4=c(7,4,6,6,3,5),T5=c(9,3,5,7,7,6))
X
X=data.frame(T1=c(5,8,7,7,10,8),
T2=(4,6,6,3,5,6),
T3=c(6,4,4,5,4,3),
T4=c(7,4,6,6,3,5),
T5=c(9,3,5,7,7,6))
X=data.frame(T1=c(5,8,7,7,10,8),
T2=c(4,6,6,3,5,6),
T3=c(6,4,4,5,4,3),
T4=c(7,4,6,6,3,5),
T5=c(9,3,5,7,7,6))
delai = stack(X)$values # transpose of Y
treatment = rep(c('T1','T2','T3','T4','T5','T6'),each=6)
paste('T',1:5,sep = '')
treatment = factor(rep(c('T1','T2','T3','T4','T5','T6'),each=6))
treatment = factor(rep(c('T1','T2','T3','T4','T5'),each=6))
plot(delai~treatment,col='green')
myaov = aov(delai~treatment)
View(myaov)
summary(myaov)
el = lm(delai~treatment)
model
model = lm(delai~treatment)
model
summary(model)
install.packages('gmodels')
library(gmodels)
cmat = rbind(" : 2 versus 3"=c(0,1,-1,0,0))
fit.contrast(myaov,treatment,cmat)
pairwise.t.test(delai,treatment,p.adjust="bonf")
TukeyHSD(myaov)
plot(TukeyHSD(myaov))
par(las=1)
plot(TukeyHSD(myaov))
load("C:/MY_DATAS/MyGit/Statistical-Analysis/multiple-linear-regression/arbre.RData")
load(arbre.Rdata)
load('arbre.Rdata')
arbre = load('arbre.Rdata')
A = load('arbre.Rdata')
dim(arbre)
type(arbre)
head(arbre)
arbre$hetraie
arbre$hauteur
attach(arbre)
boxplot(hauteur~hetraie)
L = lm(hauteur~hetraie,data=arbre)
summary(L)
anova(L)
summary(L)
TukeyHSD(L)
L2 = lm(hauteur~C(hetraie,sum),data=arbre)
summary(L2)
