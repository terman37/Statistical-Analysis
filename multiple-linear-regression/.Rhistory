predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
X= runif(50,-7,7)
Y=5-6*X+rnorm(50,0,20)
plot(X,Y)
L=lm(Y~X)
L
# true coeficients
L$coefficients
# show model on plot
abline(L,col='red')
# predict function
help(predict.lm)
# Yhat of your observations
predict(L)
# Predictions for new values
# careful needs X named for new
new = seq(-3,3,0.1) # no
new = data.frame(X=seq(-20,20,0.5))
predict(L,new)
pred.w.plim <- predict(L, new, interval = "prediction") # for new objects
pred.w.clim <- predict(L, new, interval = "confidence") # for expectation
matplot(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
# green and red are for expectation of Y
# other are for Y
pred.w.plim <- predict(L, new, interval = "prediction")
pred.w.clim <- predict(L, new, interval = "confidence")
matplot(new$X,pred.w.clim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
matplot(new$X,pred.w.plim,
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
plot(X,Y)
matlines(new$X, cbind(pred.w.clim, pred.w.plim[,-1]),
lty = c(1,2,2,3,3), type = "l", ylab = "predicted y")
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
L=lm(Y~.,data=as.data.frame(A))
L
summary(L)
X = cbind(rep(1,50),A)
X
#rank of X
install.packages('Matrix')
rankMatrix(X)
A[,3]=rpois(50,0.8)
rankMatrix(X)
#rank of X
install.packages('Matrix')
rankMatrix(X)
install.packages("Matrix")
rankMatrix(X)
Matrix.rankMatrix(X)
rankMatrix(X)
# Check details
summary(L)
rankMatrix(X)
# Generate multiple variables
A=matrix(0,nrow=50,ncol=4)
A[,1]=rexp(50,0.4)
A[,2]=rnorm(50,3,0.5)
A[,3]=rpois(50,0.8)
A[,4]=runif(50,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(50)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
# build the X matrix (Y = XB + U)
X = cbind(rep(1,50),A)
X
B=cbind(A[,1],A[,2],A[,4])
LB=lm(Y~.,data=as.data.frame(B))
LB
summary(LB)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
plot(L)
hist(L$residuals,freq = FALSE)
# Generate multiple variables
A=matrix(0,nrow=500,ncol=4)
A[,1]=rexp(500,0.4)
A[,2]=rnorm(500,3,0.5)
A[,3]=rpois(500,0.8)
A[,4]=runif(500,-3,3)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rexp(500,0.5)
# Model
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
hist(L$residuals,freq = FALSE)
# and a response
Y=3+2*A[,1]-5*A[,2]+7*A[,4]+rnorm(500)
L=lm(Y~.,data=as.data.frame(A))
L
# Check details
summary(L)
#always verify normality of the noise !
plot(L)
setwd("C:/MY_DATAS/MyGit/Statistical-Analysis")
Ble = read.table('Dataset_Ble.txt')
setwd("C:/MY_DATAS/MyGit/Statistical-Analysis/multiple-linear-regression")
Ble = read.table('Dataset_Ble.txt')
dim(Ble)
head(Ble)
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
parcelle
Ble$parcelle
Ble$variete
Ble$phyto
boxplot(Ble~variete)
attach(Ble)
boxplot(Ble~variete)
phyto
rdt
boxplot(Ble~variete,data=Ble)
boxplot(rdt~variete)
boxplot(rdt~phyto)
# influence of variete on rdt
model = aov(rdt~variete)
bartlett.test(model$res~rdt)
bartlett.test(model$res~variete)
summary(model)
summary(aov(abs(model$res)~variete))
#p-value small --> H1 --> variances not equal
LM = lm(rdt~variete)
summary(LM)
plot(LM)
ALM = anova(LM)
ALM
# influence of variete on rdt
PLM = lm(rdt~phyto)
summary(PLM)
plot(PLM)
APLM = anova(PLM)
APLM
model = aov(rdt~variete)
model
summary(model)
boxplot(rdt~variete * phyto)
boxplot(rdt~variete * phyto, col=c('blue','green'))
boxplot(rdt~ phyto * variete, col=c('blue','green'))
boxplot(rdt ~ phyto * variete, col=c('green','blue'))
boxplot(rdt~variete,col='yellow')
boxplot(rdt~variete,col='red')
boxplot(rdt~variete,col='yellow')
boxplot(rdt~phyto,col='red')
boxplot(rdt ~ phyto * variete, col=c('green','blue'))
# additive model (variete and phyto independent)
modeladd = aov2(rdt ~ phyto + variete)
# additive model (variete and phyto independent)
modeladd = aov(rdt ~ phyto + variete)
summary(modeladd)
# other
model = aov(rdt ~ phyto * variete)
summary(model)
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
# Initial exploration
dim(Ble)
head(Ble)
attach(Ble)
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
summary(VLM)
# *********************************************************************************
# one-way anova influence of variete on rdt
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
summary(VLM)
plot(VLM)
# p-value veryy small < 0.05 --> H1 --> all mu_i not equal
# --> there is an influence of variete on rdt
# *********************************************************************************
# one-way anova influence of phyto on rdt
boxplot(rdt~phyto,col='red')
PLM = lm(rdt~phyto)
summary(PLM)
plot(PLM)
# p-value very big > 0.05 --> H0 --> all mu_i considered equal
# --> there is no influence of phyto on rdt
# *********************************************************************************
# two-way anova influence of phyto and variete on rdt
boxplot(rdt ~ phyto * variete, col=c('green','blue'))
# additive model (variete and phyto independent)
modeladd = aov(rdt ~ phyto + variete)
summary(modeladd)
# seems phyto is not influent whereas variete is.
# model with interraction effect between phyto and variete
model = aov(rdt ~ phyto * variete)
summary(model)
boxplot(rdt ~ phyto + variete, col=c('green','blue'))
# model with interraction effect between phyto and variete
model = aov(rdt ~ phyto * variete)
summary(model)
v
summary(modelint)
# model with interraction effect between phyto and variete
modelint = aov(rdt ~ phyto * variete)
summary(modelint)
plot(modelint)
TukeyHSD(modelint)
TukeyHSD(modeladd)
library(car)
install.packages('car')
library(car)
leveneTest(rdt~variete)
help(leveneTest)
# p-value very big > 0.05 --> H0 --> all mu_i considered equal
# --> there is no influence of phyto on rdt
leveneTest(rdt~variete)
plot(PLM,2)
# check residuals are gaussian
plot(modelint,2)
plot(VLM,2)
leveneTest(rdt~phyto * variete)
boxplot(rdt~phyto,col='red')
# p-value very big > 0.05 --> H0 --> all mu_i considered equal
# --> there is no influence of phyto on rdt
leveneTest(rdt~phyto)
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
summary(VLM)
plot(VLM,2)
AVLM = anova(VLM)
AVLM
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
plot(VLM,2)
summary(VLM)
AVLM = anova(VLM)
AVLM
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
plot(VLM,2)
summary(VLM)
summary(aov(abs(VLM$res)~variete))
AVLM = anova(VLM)
AVLM
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
plot(VLM,2)
summary(VLM)
summary(aov(abs(VLM$res)~variete))
boxplot(rdt~variete,col='yellow')
VLM = lm(rdt~variete)
plot(VLM,2)
#summary(VLM)
summary(aov(abs(VLM$res)~variete))
if(!require(car)) install.packages("car")
library(car)
leveneTest(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(rdt~variete)
VLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(rdt~variete)
summary(aov(abs(VLM$res)~variete))
plot(VLM,2)
if(!require(car)) install.packages("car")
library(car)
leveneTest(rdt~variete)
plot(VLM,2)
help(leveneTest)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
AVLM = anova(VLM)
AVLM
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
AVLM = anova(VLM)
AVLM
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
AVLM = anova(VLM)
AVLM
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
AVLM = anova(VLM)
AVLM
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
attach(Ble)
boxplot(rdt~variete,col='yellow')
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
attach(Ble)
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(VLM,2)
plot(vLM,2)
AvLM = anova(vLM)
AvLM
boxplot(rdt~variete,col='yellow')
pLM = lm(rdt~phyto)
if(!require(car)) install.packages("car")
library(car)
leveneTest(pLM)
plot(pLM,2)
ApLM = anova(pLM)
ApLM
boxplot(rdt~phyto,col='red')
boxplot(rdt ~ phyto * variete, col=c('green','blue'))
modelint = aov(rdt ~ phyto * variete)
vpLM = lm(rdt ~ phyto * variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vpLM)
plot(vpLM,2)
AvpLM = anova(vpLM)
AvpLM
TuskeyHSD(AvpLM)
TukeyHSD(AvpLM)
TukeyHSD(vpLM)
vpAOV = aov(rdt ~ phyto * variete)
TukeyHSD(vpLM)
vpAOV = aov(rdt ~ phyto * variete)
TukeyHSD(vpAOV)
pairwise.t.test(rdt,variete,p.adjust="bonf")
pairwise.t.test(rdt,phyto*variete,p.adjust="bonf")
pairwise.t.test(rdt,variete*phyto,p.adjust="bonf")
pairwise.t.test(rdt,variete+phyto,p.adjust="bonf")
pairwise.t.test(rdt,variete,p.adjust="bonf")
vpAOV = aov(rdt ~ phyto * variete)
TukeyHSD(vpAOV)
vpAOV = aov(rdt ~ phyto * variete)
par(las=1)
plot(TukeyHSD(vpAOV))
ADDvpLM = lm(rdt ~ phyto + variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(ADDvpLM)
bartlett.test(ADDvpLM$res~phyto + variete)
plot(ADDvpLM,2)
AvpLM = anova(vpLM)
AvpLM
plot(ADDvpLM,1)
plot(ADDvpLM,2)
AvpLM = anova(vpLM)
AvpLM
ADDAvpLM = anova(ADDvpLM)
ADDAvpLM
ADDAvpLM = anova(ADDvpLM)
summary(ADDAvpLM)
ADDAvpLM = anova(ADDvpLM)
ADDAvpLM
my_anova <- aov(len ~ supp * dose, data = my_data)
my_anova <- aov(rdt ~ phyto + variete)
Anova(my_anova, type = "III")
my_anova <- aov(rdt ~ phyto * variete)
Anova(my_anova, type = "III")
my_anova <- aov(rdt ~ phyto * variete)
Anova(AvpLM, type = "III")
my_anova <- aov(rdt ~ phyto * variete)
Anova(my_anova, type = "III")
shapiro.test(AvpLM )
shapiro.test(AvpLM$res )
library(rstudioapi)
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
Ble = read.table('Dataset_Ble.txt',header=TRUE,sep=';')
attach(Ble)
dim(Ble)
head(Ble)
boxplot(rdt~variete,col='yellow')
vLM = lm(rdt~variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vLM)
plot(vLM,2)
AvLM = anova(vLM)
AvLM
boxplot(rdt~phyto,col='red')
pLM = lm(rdt~phyto)
if(!require(car)) install.packages("car")
library(car)
leveneTest(pLM)
plot(pLM,2)
ApLM = anova(pLM)
ApLM
boxplot(rdt ~ phyto * variete, col=c('green','blue'))
vpLM = lm(rdt ~ phyto * variete)
if(!require(car)) install.packages("car")
library(car)
leveneTest(vpLM)
plot(vpLM,2)
AvpLM = anova(vpLM)
AvpLM
ADDvpLM = lm(rdt ~ phyto + variete)
plot(ADDvpLM,1)
plot(ADDvpLM,2)
ADDAvpLM = anova(ADDvpLM)
ADDAvpLM
my_anova <- aov(rdt ~ phyto * variete)
Anova(my_anova, type = "III")
vpAOV = aov(rdt ~ phyto * variete)
par(las=1)
plot(TukeyHSD(vpAOV))
