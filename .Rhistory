data2
A=runif(10000)
H=hist(A,breaks=c(0,0.2,0.4,0.6,0.8,1))
H=hist(A,breaks=c(0,0.2,0.4,0.6,0.8,1),freq=FALSE)
H1=hist(A,breaks=c(0,0.2,0.6,0.8,1))
H1$counts
H$counts
1+3.22*log10(10000)
round(1+3.22*log10(10000))
round(1+3.22*log10(1000000))
round(1+3.22*log10(100))
round(1+3.22*log10(1))
round(1+3.22*log10(2))
round(1+3.22*log10(3))
round(1+3.22*log10(4))
round(1+3.22*log10(5))
round(1+3.22*log10(15))
round(1+3.22*log10(10))
fluc <- function(n,lambda,K)
{
L=c()
for (i in 1:K){
A=rexp(n,lambda)
L=c(L,1/mean(A))
}
fluc=L
}
Est=fluc(100,4,50)
Est
boxplot(Est)
Est=fluc(1000,4,50)
boxplot(Est)
Est=fluc(10000,4,50)
boxplot(Est)
Est=fluc(1000000,4,50)
boxplot(Est)
getwd()
plot(Z$interval)
mu = 2
sig2 = 1.7
n=500
alpha=0.05
# create 500 observations ~ N(mu,sig)
A=rnorm(n,mu,sqrt(sig2))
# compute CI
# var(A) = sigma hat square (n-1) observations
lowerbound = mean(A) - sqrt(var(A))/sqrt(n)*qt(1-alpha/2,n-1)
upperbound = mean(A) + sqrt(var(A))/sqrt(n)*qt(1-alpha/2,n-1)
c(lowerbound,upperbound)
# repeat 50 times
visu<-function(k,n,mu,sig2){
M=matrix(data=0,ncol=2,nrow=k)
for (i in 1:k) {
A=rnorm(n,mu,sqrt(sig2))
lowerbound = mean(A) - sqrt(var(A))/sqrt(n)*qt(1-alpha/2,n-1)
upperbound = mean(A) + sqrt(var(A))/sqrt(n)*qt(1-alpha/2,n-1)
M[i,1]=lowerbound
M[i,2]=upperbound
}
N=sum((M[,2]<2)+(M[,1]>2))
visu=list(interval=M,count=N)
}
k=50
Z=visu(k,n,mu,sig2)
Z$count
plot(Z$interval)
# Study the variation over K iterations
# of estimator
# using n randomly generated observations using POISSON distribution of parameter lambda
fluc <- function(n,lambda,K)
{
# L empty vector
L=c()
for (i in 1:K){
# generates dataset of POISSON distribution parameter lambda, n observations
A=rpois(n,lambda)
# add estimator: mean(A) in L
L=c(L,mean(A))
}
# return L
fluc=L
}
# 200 observations
# poisson parameter lambda = 5
# 1000 estimators generated
Est=fluc(200,5,1000)
hist(Est,freq=FALSE,breaks = 20)
boxplot(Est)
# Study the variation over K iterations
# of estimator
# using n randomly generated observations using POISSON distribution of parameter lambda
fluc <- function(n,lambda,K)
{
# L empty vector
L=c()
for (i in 1:K){
# generates dataset of POISSON distribution parameter lambda, n observations
A=rpois(n,lambda)
# add estimator: mean(A) in L
L=c(L,mean(A))
}
# return L
fluc=L
}
# 200 observations
# poisson parameter lambda = 5
# 1000 estimators generated
Est=fluc(200,5,1000)
hist(Est,freq=FALSE,breaks = 20)
boxplot(Est)
M=matrix(data=rpois(200*1000,5),ncol=200)
N=apply(M,1,mean)
# Other way
# Matrix with 200 col and 1000 rows filled with Poisson (5) observations
M=matrix(data=rpois(200*1000,5),ncol=200)
# Compute row by row the empirical mean
# N is composed of 1000 observations of lambda_hat_n2
N=apply(M,1,mean)
hist(N,freq=FALSE)
# Other way
# Matrix with 200 col and 1000 rows filled with Poisson (5) observations
M=matrix(data=rpois(200*10000,5),ncol=200)
# Other way
# Matrix with 200 col and 1000 rows filled with Poisson (5) observations
M=matrix(data=rpois(200*10000,5),ncol=200)
# Compute row by row the empirical mean
# N is composed of 1000 observations of lambda_hat_n2
N=apply(M,1,mean)
hist(N,freq=FALSE) # looks like a gaussian (central limit theorem) parameters: 5 , 5/200
hist(N, freq=FALSE, breaks = 50) # looks like a gaussian (central limit theorem) parameters: 5 , 5/200
hist(N, freq=FALSE) # looks like a gaussian (central limit theorem) parameters: 5 , 5/200
hist(N, freq=FALSE) # looks like a gaussian (central limit theorem) parameters: 5 , 5/200
source('C:/MY_DATAS/MyGit/FSML-Estimators/20191113-point_estimator_of_poisson.R')
data= read.table("data1.txt")
setwd("C:/MY_DATAS/MyGit/FSML-Estimators")
data= read.table("data1.txt")
View(data)
View(data)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A= read.table("data1.txt")
table(A)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A= read.table("data5.txt")
table(A)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A= read.table("data5.txt")
hist(A,freq=FALSE)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = read.table("data5.txt")
hist(A,freq=FALSE)
hist(as.numeric(A),freq=FALSE)
A = read.table("simu1.txt")
hist(A,freq=FALSE)
hist(A)
A
min(A)
max(A)
hist(as.matrix(A))
A = read.table("simu2.txt")
hist(as.matrix(A))
imu3.txt")
hist(as.matrix(A))
A = read.table("simu3.txt")
hist(as.matrix(A))
A = read.table("simu3.txt")
hist(as.matrix(A))
View(A)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = read.table("simu1.txt")
hist(as.matrix(A))
B = read.table("simu1.txt")
hist(as.matrix(A))
C = read.table("simu1.txt")
hist(as.matrix(A))
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = read.table("simu1.txt")
hist(as.matrix(A))
B = read.table("simu1.txt")
hist(as.matrix(B))
C = read.table("simu1.txt")
hist(as.matrix(C))
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = read.table("simu1.txt")
hist(as.matrix(A))
B = read.table("simu2.txt")
hist(as.matrix(B))
C = read.table("simu3.txt")
hist(as.matrix(C))
B = read.table("simu2.txt")
# guess an exponential distribution
lambdahat = 1 / mean(A)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test
t=ks.test(A,'pexp',lambdahat)
t
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test
t=ks.test(A,'pexp',lambdahat)
t
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test
ks.test(A,'pexp',lambdahat)
help(ks.test)
# goodness-of-fit test
ks.test(A,'dexp',lambdahat)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pexp',lambdahat)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
# First sample
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pexp',lambdahat)
# p-value > alpha --> we keep H0 (this is an exponential dist) --> we keep our guess
# be careful, ks.test is sensitive to sample size (not use with small sample)
# set working directory to current one
library(rstudioapi)
# Getting the path of your current open file
current_path = rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path ))
alpha=0.05
# First sample:
A = as.matrix(read.table("simu1.txt"))
# look at the shape
hist(A)
# guess an exponential distribution
lambdahat = 1 / mean(A)
lambdahat
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pexp',lambdahat)
# p-value > alpha --> we keep H0 (this is an exponential dist) --> we keep our guess
# be careful, ks.test is sensitive to sample size (not use with small sample)
lowerbound = 1/mean(A) - 1/(sqrt(length(A))*mean(A))*qnorm(1-alpha/2)
upperbound = 1/mean(A) + 1/(sqrt(length(A))*mean(A))*qnorm(1-alpha/2)
c(lowerbound,upperbound)
# Second sample:
B = as.matrix(read.table("simu2.txt"))
# look at the shape
hist(B)
# guess a normal distribution
muhat = mean(B)
sig2hat = var(B)
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pnorm',muhat,sig2hat)
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pnorm',muhat,sqrt(sig2hat))
# Second sample:
B = as.matrix(read.table("simu2.txt"))
# look at the shape
hist(B)
# guess a normal distribution
muhat = mean(B)
sig2hat = var(B)/length(B)
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pnorm',muhat,sqrt(sig2hat))
sig2hat = var(B)
# goodness-of-fit test - Kolmogorov-Smirnov
ks.test(A,'pnorm',muhat,sqrt(sig2hat))
